name: "Install tool"
description: "Action for installing a tool, or restoring it from cache if such
  exists."
author: "The Dev Nolus Team <dev@nolus.io>"

inputs:
  fail-on-cache-miss:
    description: "Indicates whether the action should fail in case the cache is
      not already available."
    required: true
  local:
    description: "Indicates whether the package is locally sourced. When set
      \"true\", it is required for the used stable Rust toolchain to be
      available."
    required: true
  no-fetching:
    description: "Indicates whether to restore tool from cache or just create
      such cache if it doesn't already exist."
    required: true
  tool:
    description: "The name of the package, if the package is not locally
      sourced, or it's directory, if it's locally sourced. The installed binary
      is required to have the same name as the package, or directory in the case
      of locally sourced ones."
    required: true

runs:
  using: "composite"
  steps:
    - name: 'Check inputs'
      shell: "sh"
      env:
        fail_on_cache_miss: |-
          ${{ inputs.fail-on-cache-miss }}
        no_fetching: |-
          ${{ inputs.no-fetching }}
        local: |-
          ${{ inputs.local }}
      run: |-
        set -eu

        check_boolean() {
          set -eu

          case "${1:?}" in
            ("false"|"true")
              shift
              ;;
            (*)
              "echo" "Variable does not contain a boolean value!"

              exit 1
          esac

          case "${#}" in
            ("0") ;;
            (*)
              "echo" "Function expects only one argument!"

              exit 1
          esac
        }

        "check_boolean" "${fail_on_cache_miss:?}"
        "check_boolean" "${local:?}"
        "check_boolean" "${no_fetching:?}"
    - id: "cache-key"
      shell: "sh"
      env:
        local: |-
          ${{ inputs.local }}
        tool: |-
          ${{ inputs.tool }}
      run: |-
        case "${local}" in
          ("false")
            tool_info="$(
              "curl" \
                --silent \
                --user-agent "nolus-protocol/ci (https://github.com/nolus-protocol/nolus-money-market)" \
                --max-time 30 \
                "https://crates.io/api/v1/crates/${tool:?}"
            )"

            # Small delay to respect crates.io rate limits (1 req/sec)
            sleep 1

            key="$(
              "jq" \
                --exit-status \
                --raw-output \
                ".crate.max_stable_version" \
                <<EOF
        ${tool_info:?}
        EOF
            )"
          ;;
          ("true")
            files="$("mktemp")"
            readonly files

            "find" \
              "." \
              -type "f" \
              -a \
              "(" \
              -path "./.cargo/*" \
              -o \
              -path "./.cargo/Cargo.lock" \
              -o \
              -path "./.cargo/Cargo.toml" \
              -o \
              -path "./tools/{tool:?}/*" \
              ")" \
              -print0 \
              >"${files:?}"

            file_digests="$(
              "xargs" \
                -0 \
                -E "" \
                "sha256sum" \
                --binary \
                <"${files:?}"
            )"

            digest="$(
              "sha256sum" \
                <<EOF
        ${file_digests:?}
        EOF
            )"

            key="$(
              "sed" \
                "s/[[:space:]]*-//" \
                <<EOF
        ${digest:?}
        EOF
            )"
            ;;
        esac

        "echo" \
          "key<<EOF
        tool-${tool:?}-${key:?}
        EOF" \
          >>"${GITHUB_OUTPUT:?}"
    - id: "cache-restore"
      uses: "actions/cache/restore@v4"
      with:
        fail-on-cache-miss: |-
          ${{ inputs.fail-on-cache-miss }}
        key: |-
          ${{ steps.cache-key.outputs.key }}
        lookup-only: |-
          ${{ inputs.no-fetching }}
        path: |-
          ${{ format('~/.cargo/bin/{0}', inputs.tool) }}
    - if: |-
        inputs.no-fetching != 'true'
          && steps.cache-restore.conclusion == 'success'
          && steps.cache-restore.outputs.cache-hit == 'true'
      shell: "sh"
      env:
        tool: |-
          ${{ inputs.tool }}
      run: |-
        set -eu

        "chmod" \
          "0555" \
          "/${HOME:?}/.cargo/bin/${tool:?}"
    - if: |-
        steps.cache-restore.conclusion == 'success'
          && steps.cache-restore.outputs.cache-hit != 'true'
      shell: "sh"
      env:
        local: |-
          ${{ inputs.local }}
        tool: |-
          ${{ inputs.tool }}
      run: |-
        set -eu

        case "${local:?}" in
          ("false")
            "cargo" \
              "install" \
              --force \
              "${tool:?}"
            ;;
          ("true")
            "cargo" \
              "install" \
              --force \
              --path "./tools/${tool:?}/"
            ;;
        esac
    - if: |-
        steps.cache-restore.conclusion == 'success'
          && steps.cache-restore.outputs.cache-hit != 'true'
      uses: "actions/cache/save@v4"
      with:
        key: |-
          ${{ steps.cache-key.outputs.key }}
        path: |-
          ${{ format('~/.cargo/bin/{0}', inputs.tool) }}
