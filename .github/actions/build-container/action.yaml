name: "Build container image"
description: "Action for building a container image, or restoring it from
  cache if such exists."
author: "The Dev Nolus Team <dev@nolus.io>"

inputs:
  additional-digest-data:
    description: ""
    required: false
  additional-digest-targets:
    description: ""
    required: false
  build-step:
    description: ""
    required: true
  disable-caching:
    default: false
    description: ""
    required: false
  image-friendly-name:
    description: ""
    required: true
  image-name:
    description: ""
    required: true

outputs:
  hash:
    description: ""
    value: |-
      ${{ steps.values.outputs.hash }}
  image-id:
    description: ""
    value: |-
      ${{ inputs.image-name }}@${{ steps.image-digest.outputs.digest }}

runs:
  using: "composite"
  steps:
    - env:
        additional_digest_data: |-
          ${{ inputs.additional-digest-data || '' }}
        additional_digest_targets: |-
          ${{ inputs.additional-digest-targets || '' }}
        build_step: |-
          ${{ inputs.build-step }}
        image_name: |-
          ${{ inputs.image-name }}
        runner_temp: |-
          ${{ runner.temp }}
      id: "values"
      run: |-
        set -eu

        hash_target() (
          case "${#:?}" in
            ("1") ;;
            (*)
              "echo" \
                "This function takes only one argument!" \
                >&2

              exit "1"
          esac

          files="$("find" "${1:?}" -type "f")"

          files="$(
            "sort" <<EOF
        ${files:?}
        EOF
          )"

          hash=""

          while read -r file
          do
            hash="${hash?}
        $("sha256sum" "${file:?}")"
          done <<EOF
        ${files:?}
        EOF

          hash="$(
            "sha256sum" <<EOF
        ${hash?}
        EOF
          )"

          "echo" "${hash:?}"
        )

        additional_targets_hash=""

        case "${additional_digest_targets?}" in
          ("") ;;
          (*)
            while read -r directory
            do
              additional_targets_hash="${additional_targets_hash?}
        $("hash_target" "${directory:?}")"
            done <<EOF
        ${additional_digest_targets:?}
        EOF
        esac

        additional_targets_hash="$(
          "sha256sum" <<EOF
        ${additional_targets_hash?}
        EOF
        )"

        hash="$(
          "sha256sum" \
            <<EOF
        $("hash_target" "./.github/")
        ${additional_digest_data?}
        ${additional_targets_hash:?}
        ${build_step:?}
        EOF
        )"
        hash="${hash%%[[:space:]]*}"
        readonly "hash"

        should_run="$(
          ids="$(
            "docker" \
              "image" \
              "list" \
              --quiet \
              "${image_name:?}:${hash:?}"
          )"

          case "${ids?}" in
            ("")
              "echo" "true"
              ;;
            (*) "echo" "false"
          esac
        )"

        "echo" \
          "should-run<<EOF
        ${should_run:?}
        EOF
        hash<<EOF
        ${hash:?}
        EOF
        key<<EOF
        container-${hash:?}
        EOF
        path<<EOF
        ${runner_temp:?}/container-${hash:?}.tar
        EOF" \
          >>"${GITHUB_OUTPUT:?}"
      shell: "sh"
    - id: "cache-restore"
      if: |-
        fromJSON(steps.values.outputs.should-run)
          && (! fromJSON(inputs.disable-caching))
      uses: "actions/cache/restore@v4"
      with:
        fail-on-cache-miss: false
        key: |-
          ${{ steps.values.outputs.key }}
        lookup-only: false
        path: |-
          ${{ steps.values.outputs.path }}
          ./${{ inputs.image-name }}-image-digest
    - env:
        container_path: |-
          ${{ steps.values.outputs.path }}
      if: |-
        fromJSON(steps.values.outputs.should-run)
          && steps.cache-restore.outputs.cache-hit == 'true'
      run: |-
        "docker" \
          "image" \
          "load" \
          --input "${container_path:?}"
      shell: "sh"
    - env:
        container_path: |-
          ${{ steps.values.outputs.path }}
      id: "build"
      if: |-
        fromJSON(steps.values.outputs.should-run)
          && steps.cache-restore.outputs.cache-hit != 'true'
      run: |-
        set -eu

        . "./.github/build-container.sh"

        ${{ inputs.build-step }}
      shell: "sh"
    - env:
        image_friendly_name: |-
          ${{ inputs.image-friendly-name }}
      id: "image-digest"
      run: |-
        set -eu

        digest="$("cat" "./.${image_friendly_name:?}-image-digest")"

        "echo" \
          "digest<<EOF
        ${digest:?}
        EOF" \
          >>"${GITHUB_OUTPUT:?}"
      shell: "sh"
    - env:
        container_path: |-
          ${{ steps.values.outputs.path }}
        hash: |-
          ${{ steps.values.outputs.hash }}
        image_digest: |-
          ${{ steps.image-digest.outputs.digest }}
        image_name: |-
          ${{ inputs.image-name }}
      id: "export"
      if: |-
        fromJSON(steps.values.outputs.should-run)
          && (! fromJSON(inputs.disable-caching))
          && steps.cache-restore.outputs.cache-hit != 'true'
      run: |-
        set -eu

        "docker" \
          "image" \
          "tag" \
          "${image_name:?}@${image_digest:?}" \
          "${image_name:?}:${hash:?}"

        "docker" \
          "image" \
          "save" \
          --output "${container_path:?}" \
          "${image_name:?}@${image_digest:?}"
      shell: "sh"
    - if: |-
        fromJSON(steps.values.outputs.should-run)
          && (! fromJSON(inputs.disable-caching))
          && steps.cache-restore.outputs.cache-hit != 'true'
      uses: "actions/cache/save@v4"
      with:
        key: |-
          ${{ steps.values.outputs.key }}
        path: |-
          ${{ steps.values.outputs.path }}
          ./${{ inputs.image-friendly-name }}-image-digest
