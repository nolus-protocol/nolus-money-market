name: "<Callable> Run checks & build"
run-name: "Running workflow for smart contracts"

on:
  workflow_dispatch:
    inputs:
      check-dependencies-version:
        description: "Check dependencies' versions."
        required: true
        default: true
        type: "boolean"
      upload-artifacts:
        description: "Upload optimized builds as artifacts."
        required: true
        default: false
        type: "boolean"
  push:
    branches:
      - "main"
    tags:
      - "*"
    paths-ignore:
      - "**/*.md"
  pull_request:
    branches:
      - "main"
    paths-ignore:
      - "**/*.md"

concurrency:
  cancel-in-progress: true
  group: |-
    ${{ format('{0}-{1}-{2}-{3}', github.ref_name, github.ref_type, github.event_name, inputs.check-dependencies-version, inputs.upload-artifacts) }}

defaults:
  run:
    shell: "sh"

env:
  CARGO_TERM_COLOR: "always"
  SOFTWARE_RELEASE_ID: "ci"
  PROTOCOL_NETWORK: "ci"
  PROTOCOL_NAME: "ci"
  PROTOCOL_RELEASE_ID: "ci"
  check-dependencies-versions: |-
    ${{ toJSON(github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && inputs.check-dependencies-version)) }}
  upload-artifacts: |-
    ${{ toJSON(github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && inputs.upload-artifacts)) }}

jobs:
  load-configuration:
    runs-on: "ubuntu-latest"
    name: "Load configuration"
    outputs:
      dex-types-json: |-
        ${{ steps.configuration.outputs.dex-types-json }}
      profiles-json: |-
        ${{ steps.configuration.outputs.profiles-json }}
      workspaces-json: |-
        ${{ steps.configuration.outputs.workspaces-json }}
    steps:
      - uses: "actions/checkout@v4"
      - id: "configuration"
        name: "Load configuration"
        run: |-
          set -eu

          . "./scripts/check/configuration.sh"

          workspaces_quoted="$(
            "jq" \
              --raw-input \
              <<EOF
          ${workspaces:?}
          EOF
          )"

          workspaces_json="$(
            "jq" \
              --slurp \
              <<EOF
          ${workspaces_quoted:?}
          EOF
          )"

          dex_types_quoted="$(
            "jq" \
              --raw-input \
              <<EOF
          ${dex_types:?}
          EOF
          )"

          dex_types_json="$(
            "jq" \
              --slurp \
              <<EOF
          ${dex_types_quoted:?}
          EOF
          )"

          profiles_quoted="$(
            "jq" \
              --raw-input \
              <<EOF
          ${profiles:?}
          EOF
          )"

          profiles_json="$(
            "jq" \
              --slurp \
              <<EOF
          ${profiles_quoted:?}
          EOF
          )"

          "echo" \
            "workspaces-json<<EOF
          ${workspaces_json:?}
          EOF
          dex-types-json<<EOF
          ${dex_types_json:?}
          EOF
          profiles-json<<EOF
          ${profiles_json:?}
          EOF" \
            >>"${GITHUB_OUTPUT}"
  prepare_tool_caches:
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: true
      matrix:
        local:
          - "false"
        tool:
          - "cargo-audit"
          - "cargo-nextest"
          - "cargo-udeps"
          - "git-cliff"
        include:
          - local: "true"
            tool: "cargo-each"
    name: |-
      Prepare tool caches [${{ matrix.tool }}]
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
      - name: |-
          Install `${{ matrix.tool }}` and create cache
        uses: "./.github/actions/install-tool"
        with:
          fail-on-cache-miss: "false"
          local: "${{ matrix.local }}"
          no-fetching: "true"
          tool: "${{ matrix.tool }}"
  check-lock-files:
    needs:
      - "load-configuration"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: true
      matrix:
        workspace: "${{ fromJSON(needs.load-configuration.outputs.workspaces-json) }}"
    name: |-
      Check lock files [${{ matrix.workspace }}]
    steps:
      - uses: "actions/checkout@v4"
      - if: |-
          fromJSON(env.check-dependencies-versions)
        name: "Load configuration"
        run: |-
          "cargo" \
            "update" \
            --locked
        working-directory: |-
          ${{ matrix.workspace }}
  workspace_check:
    needs:
      - "load-configuration"
      - "prepare_tool_caches"
      - "check-lock-files"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: true
      matrix:
        workspace: "${{ fromJSON(needs.load-configuration.outputs.workspaces-json) }}"
    env:
      workspace: |-
        ${{ matrix.workspace }}
    name: |-
      Workspace-level checks [${{ matrix.workspace }}]
    steps:
      - name: "Update Rust"
        run: |-
          "rustup" "update"
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
      - name: "Install `cargo-audit` from cache"
        uses: "./.github/actions/install-tool"
        with:
          fail-on-cache-miss: "true"
          local: "false"
          no-fetching: "false"
          tool: "cargo-audit"
      - name: "Copy `.cargo` configuration"
        run: |-
          set -eu

          "cp" \
            -R \
            "./.cargo" \
            "./${workspace:?}/.cargo"
      - name: "Run workspace-level checks"
        run: |-
          set -eu

          "sh" \
            -eu \
            "./scripts/check/workspace_checks.sh" \
            "./${workspace:?}"
  instance_lint:
    needs:
      - "load-configuration"
      - "prepare_tool_caches"
      - "check-lock-files"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: true
      matrix:
        dex-type: "${{ fromJSON(needs.load-configuration.outputs.dex-types-json) }}"
        profile: "${{ fromJSON(needs.load-configuration.outputs.profiles-json) }}"
        workspace: "${{ fromJSON(needs.load-configuration.outputs.workspaces-json) }}"
    name: |-
      Instance-level lints [${{ matrix.workspace }}; ${{ matrix.dex-type }}; ${{ matrix.profile }}]
    steps:
      - name: "Update Rust"
        run: |-
          "rustup" "update"
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
      - name: "Install `cargo-each` from cache"
        uses: "./.github/actions/install-tool"
        with:
          fail-on-cache-miss: "true"
          local: "true"
          no-fetching: "false"
          tool: "cargo-each"
      - name: "Copy CI build configuration"
        run: |-
          "cp" \
            -R \
            "./.github/test-data/build-configuration" \
            "./"
      - env:
          dex_type: |-
            ${{ matrix.dex-type }}
          profile: |-
            ${{ matrix.profile }}
          RUN_CLIPPY_QUIET: "1"
          workspace: |-
            ${{ matrix.workspace }}
        name: "Run instance-level lints"
        run: |-
          set -eu

          "sh" \
            -eu \
            "./scripts/check/instance_lint.sh" \
            "./${workspace:?}" \
            "${dex_type:?}" \
            "${profile:?}"
  instance_check_deps:
    needs:
      - "load-configuration"
      - "prepare_tool_caches"
      - "check-lock-files"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: true
      matrix:
        dex-type: "${{ fromJSON(needs.load-configuration.outputs.dex-types-json) }}"
        workspace: "${{ fromJSON(needs.load-configuration.outputs.workspaces-json) }}"
    name: |-
      Check instance dependencies [${{ matrix.workspace }}; ${{ matrix.dex-type }}]
    steps:
      - name: "Update Rust"
        run: |-
          "rustup" "update"
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
      - name: "Install `cargo-udeps` from cache"
        uses: "./.github/actions/install-tool"
        with:
          fail-on-cache-miss: "true"
          local: "false"
          no-fetching: "false"
          tool: "cargo-udeps"
      - name: "Install `cargo-each` from cache"
        uses: "./.github/actions/install-tool"
        with:
          fail-on-cache-miss: "true"
          local: "true"
          no-fetching: "false"
          tool: "cargo-each"
      - name: "Install nightly Rust toolchain"
        run: |-
          "rustup" \
            "toolchain" \
            "add" \
            "nightly"
      - name: "Copy CI build configuration"
        run: |-
          "cp" \
            -R \
            "./.github/test-data/build-configuration" \
            "./"
      - env:
          dex_type: |-
            ${{ matrix.dex-type }}
          workspace: |-
            ${{ matrix.workspace }}
        name: "Check dependencies"
        run: |-
          set -eu

          "sh" \
            -eu \
            "./scripts/check/protocol_check_deps.sh" \
            "./${workspace:?}" \
            "${dex_type:?}"
  instance_tests:
    needs:
      - "load-configuration"
      - "prepare_tool_caches"
      - "check-lock-files"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: true
      matrix:
        dex-type: "${{ fromJSON(needs.load-configuration.outputs.dex-types-json) }}"
        profile: "${{ fromJSON(needs.load-configuration.outputs.profiles-json) }}"
        workspace: "${{ fromJSON(needs.load-configuration.outputs.workspaces-json) }}"
    name: |-
      Run instance tests [${{ matrix.workspace }}; ${{ matrix.dex-type }}; ${{ matrix.profile }}]
    steps:
      - name: "Update Rust"
        run: |-
          "rustup" "update"
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
      - name: "Install `cargo-each` from cache"
        uses: "./.github/actions/install-tool"
        with:
          fail-on-cache-miss: "true"
          local: "true"
          no-fetching: "false"
          tool: "cargo-each"
      - name: "Install `cargo-nextest` from cache"
        uses: "./.github/actions/install-tool"
        with:
          fail-on-cache-miss: "true"
          local: "false"
          no-fetching: "false"
          tool: "cargo-nextest"
      - name: "Copy CI build configuration"
        run: |-
          "cp" \
            -R \
            "./.github/test-data/build-configuration" \
            "./"
      - env:
          dex_type: |-
            ${{ matrix.dex-type }}
          profile: |-
            ${{ matrix.profile }}
          USE_NEXTEST: "1"
          workspace: |-
            ${{ matrix.workspace }}
        name: "Run instance tests"
        run: |-
          set -eu

          "sh" \
            -eu \
            "./scripts/check/instance_tests.sh" \
            "./${workspace:?}" \
            "${dex_type:?}" \
            "${profile:?}"
  build:
    needs:
      - "workspace_check"
      - "instance_lint"
      - "instance_check_deps"
      - "instance_tests"
    runs-on: "ubuntu-latest"
    name: "Build platform binaries and protocol container image"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: "0"
          fetch-tags: "true"
      - id: "builder-base-container-cache-key"
        env:
          check_deps_updated: |-
            ${{ toJSON(env.check-dependencies-versions) }}
        run: |-
          echo \
            "cache-key<<EOF
          builder-base-container-[check-deps=${check_deps_updated:?}]
          EOF" \
            >>"${GITHUB_OUTPUT}"
      - id: "restore-builder-base-container-cache"
        name: "Restore builder base image from cache"
        uses: "actions/cache/restore@v4"
        with:
          key: |-
            ${{ steps.builder-base-container-cache-key.outputs.cache-key }}
          path: |-
            builder-base-container.tar
      - if: |-
          !steps.restore-builder-base-container-cache.outputs.cache-hit
        name: "Build builder base image"
        run: |-
          "docker" \
            "buildx" \
            "build" \
            --file "build.Containerfile" \
            --tag "builder-base" \
            --target "builder-base" \
            "."
      - if: |-
          !steps.restore-builder-base-container-cache.outputs.cache-hit
        name: "Export builder base image"
        run: |-
          "docker" \
            "save" \
            --output "builder-base-container.tar" \
            "builder-base"
      - if: |-
          !steps.restore-builder-base-container-cache.outputs.cache-hit
        name: "Store builder base image to cache"
        uses: "actions/cache/save@v4"
        with:
          key: |-
            ${{ steps.builder-base-container-cache-key.outputs.cache-key }}
          path: |-
            builder-base-container.tar
      - if: |-
          steps.restore-builder-base-container-cache.outputs.cache-hit
        name: "Load builder base image"
        run: |-
          "docker" \
            "load" \
            --input "builder-base-container.tar"
      - name: "Produce builder images"
        env:
          CHECK_DEPS_UPDATED: |-
            ${{ env.check-dependencies-versions }}
        run: |-
          set -eu

          builder_image() {
            target="${1:?}"

            "docker" \
              "buildx" \
              "build" \
              --build-arg "check_dependencies_updated=${CHECK_DEPS_UPDATED:?}" \
              --file "build.Containerfile" \
              --tag "${target:?}-builder" \
              --target "${target:?}-builder" \
              "."
          }

          for workspace in \
            "platform" \
            "protocol"
          do
            "builder_image" "${workspace:?}"
          done
      - name: "Produce platform binaries"
        run: |-
          set -eu

          build_and_pack() {
            network="${1:?}"

            "mkdir" "./artifacts-${network:?}/"

            "docker" \
              "run" \
              --volume "./artifacts-${network:?}/:/artifacts/" \
              "platform-builder" \
              "${network:?}"
          }

          for network in \
            "test-net" \
            "production-net"
          do
            "build_and_pack" "${network:?}"
          done
      - if: |-
          fromJSON(env.upload-artifacts)
        name: "Export protocol builder image"
        run: |-
          "docker" \
            "image" \
            "save" \
            --output "protocol-builder.tar" \
            "protocol-builder"
      - if: |-
          fromJSON(env.upload-artifacts)
        name: "Upload test-net platform binaries"
        uses: "actions/upload-artifact@v4"
        with:
          if-no-files-found: "error"
          name: "platform-test-net"
          path: |-
            ./artifacts-test-net/*
      - if: |-
          fromJSON(env.upload-artifacts)
        name: "Upload production-net platform binaries"
        uses: "actions/upload-artifact@v4"
        with:
          if-no-files-found: "error"
          name: "platform-production-net"
          path: |-
            ./artifacts-production-net/*
      - if: |-
          fromJSON(env.upload-artifacts)
        name: "Upload protocol builder image"
        uses: "actions/upload-artifact@v4"
        with:
          if-no-files-found: "error"
          name: "protocol-builder"
          path: |-
            ./protocol-builder.tar
  create_draft_release:
    needs:
      - "build"
    if: |-
      github.ref_type == 'tag'
    name: "Create draft release"
    permissions:
      contents: "write"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: "0"
          fetch-tags: "true"
          sparse-checkout: |-
            .github/actions/install-tool
      - name: "Install `git-cliff` from cache"
        uses: "./.github/actions/install-tool"
        with:
          fail-on-cache-miss: "true"
          local: "false"
          no-fetching: "false"
          tool: "git-cliff"
      - name: "Download produced artifacts"
        uses: "actions/download-artifact@v4"
        with:
          merge-multiple: "false"
          path: "./artifacts/"
      - name: "Create test-net platform binaries archive"
        run: |-
          set -eu

          files="$(
            "find" \
              "." \
              "!" \
              -path "./**/**"
          )"

          "xargs" \
            -E "" \
            -n "1" \
            "tar" \
            -r \
            -f "../platform-test-net.tar" \
            <<EOF
          ${files:?}
          EOF
        working-directory: "./artifacts/platform-test-net/"
      - name: "Compress test-net platform binaries archive"
        run: |-
          "gzip" "./platform-test-net.tar"
        working-directory: "./artifacts/"
      - name: "Create production-net platform binaries archive"
        run: |-
          set -eu

          files="$(
            "find" \
              "." \
              "!" \
              "(" \
              -path "." \
              -o \
              -path "./**/**" \
              ")"
          )"
          files="$(
            "sed" \
              -e "s/^\\.\\/\\(.\\+\\)$/\\1/g" \
              <<EOF
          ${files:?}
          EOF
          )"
          readonly files

          "xargs" \
            -E "" \
            -n "1" \
            "tar" \
            -r \
            -f "../platform-production-net.tar" \
            <<EOF
          ${files:?}
          EOF
        working-directory: "./artifacts/platform-production-net/"
      - name: "Compress production-net platform binaries archive"
        run: |-
          "gzip" "./platform-production-net.tar"
        working-directory: "./artifacts/"
      - name: "Compress protocol builder image"
        run: |-
          set -eu

          "gzip" "./protocol-builder.tar"

          "mv" \
            "./protocol-builder.tar.gz" \
            "../"
        working-directory: "./artifacts/protocol-builder/"
      - name: "Generate changelog"
        run: |-
          "git" \
            "cliff" \
            --current \
            >"./changelog"
      - name: "Create draft release"
        uses: "softprops/action-gh-release@v2"
        with:
          name: |-
            ${{ github.ref_name }}
          draft: true
          body_path: "./changelog"
          generate_release_notes: false
          files: |
            ./artifacts/*.tar.gz
