name: "<Callable> Run checks & build"
run-name: "Running workflow for smart contracts"

on:
  workflow_dispatch:
    inputs:
      check-dependencies-version:
        description: "Check dependencies' versions."
        required: true
        default: true
        type: "boolean"
      upload-artifacts:
        description: "Upload optimized builds as artifacts."
        required: true
        default: false
        type: "boolean"
  push:
    branches:
      - "main"
    tags:
      - "*"
    paths-ignore:
      - "**/*.md"
  pull_request:
    branches:
      - "main"
    paths-ignore:
      - "**/*.md"

concurrency:
  cancel-in-progress: true
  group: |-
    ${{ format('{0}-{1}-{2}-{3}', github.ref_name, github.ref_type, github.event_name, inputs.check-dependencies-version, inputs.upload-artifacts) }}

defaults:
  run:
    shell: "sh"

env:
  POSIXLY_CORRECT: "1"

permissions:
  actions: "write"

jobs:
  matrix-arguments:
    runs-on: "ubuntu-latest"
    outputs:
      profiles-json: |-
        ${{ steps.out.outputs.profiles-json }}
      workspaces-json: |-
        ${{ steps.out.outputs.workspaces-json }}
    steps:
      - uses: "actions/checkout@v4"
      - id: "out"
        run: |-
          set -eu

          profiles='["ci_dev","ci_dev_no_debug_assertions"]'

          workspaces="$(
            "find" \
              "." \
              -name "Cargo.lock"
          )"

          workspaces="$(
            joined=""

            while read -r workspace
            do
              workspace="${workspace#./}"

              workspace="${workspace%/Cargo.lock}"

              joined="${joined?},\"${workspace:?}\""
            done \
              <<EOF
          ${workspaces:?}
          EOF

            "echo" "[${joined#,}]"
          )"

          echo \
            "profiles-json<<EOF
          ${profiles:?}
          EOF
          workspaces-json<<EOF
          ${workspaces:?}
          EOF" \
            >>"${GITHUB_OUTPUT:?}"
  audit-dependencies:
    runs-on: "ubuntu-latest" # "self-hosted"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "./.github/actions/setup-docker"
      - run: |-
          "./ci/scripts/for-each-workspace.sh" \
            "cp" \
            -R \
            "../.cargo" \
            "./"
      - id: "build-container"
        uses: "./.github/actions/build-image"
        with:
          target: "audit-dependencies"
      - env:
          image_tag: |-
            ${{ steps.build-container.outputs.tag }}
        run: |-
          "docker" \
            "container" \
            "run" \
            --rm \
            --tty \
            --volume ".:/src:ro" \
            "${image_tag:?}"
  check-formatting:
    runs-on: "ubuntu-latest" # "self-hosted"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "./.github/actions/setup-docker"
      - id: "build-container"
        uses: "./.github/actions/build-image"
        with:
          target: "check-formatting"
      - env:
          image_tag: |-
            ${{ steps.build-container.outputs.tag }}
        run: |-
          "docker" \
            "container" \
            "run" \
            --rm \
            --tty \
            --volume ".:/src:ro" \
            "${image_tag:?}"
  check-lockfiles:
    runs-on: "ubuntu-latest" # "self-hosted"
    env:
      check-dependencies-versions: |-
        ${{ toJSON(github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && inputs.check-dependencies-version)) }}
    steps:
      - if: |-
          fromJSON(env.check-dependencies-versions)
        uses: "actions/checkout@v4"
      - if: |-
          fromJSON(env.check-dependencies-versions)
        uses: "./.github/actions/setup-docker"
      - id: "build-container"
        if: |-
          fromJSON(env.check-dependencies-versions)
        uses: "./.github/actions/build-image"
        with:
          target: "check-lockfiles"
      - env:
          image_tag: |-
            ${{ steps.build-container.outputs.tag }}
        if: |-
          fromJSON(env.check-dependencies-versions)
        run: |-
          "docker" \
            "container" \
            "run" \
            --rm \
            --tty \
            --volume ".:/src:ro" \
            "${image_tag:?}"
  check-unused-dependencies:
    runs-on: "ubuntu-latest" # "self-hosted"
    needs:
      - "matrix-arguments"
    strategy:
      matrix:
        workspace: |-
          ${{ fromJSON(needs.matrix-arguments.outputs.workspaces-json) }}
    steps:
      - uses: "actions/checkout@v4"
      - uses: "./.github/actions/setup-docker"
      - run: |-
          "mv" "./.github/test-data/build-configuration" "./"
      - id: "build-container"
        uses: "./.github/actions/build-image"
        with:
          build-contexts: |-
            tools=./tools
          target: "check-unused-dependencies"
      - env:
          image_tag: |-
            ${{ steps.build-container.outputs.tag }}
          workspace: |-
            ${{ matrix.workspace }}
        run: |-
          "docker" \
            "container" \
            "run" \
            --rm \
            --tty \
            --volume ".:/src:ro" \
            "${image_tag:?}" \
            "${workspace:?}"
  lint:
    runs-on: "ubuntu-latest" # "self-hosted"
    needs:
      - "matrix-arguments"
    strategy:
      matrix:
        profile: |-
          ${{ fromJSON(needs.matrix-arguments.outputs.profiles-json) }}
        workspace: |-
          ${{ fromJSON(needs.matrix-arguments.outputs.workspaces-json) }}
    steps:
      - uses: "actions/checkout@v4"
      - uses: "./.github/actions/setup-docker"
      - run: |-
          "mv" "./.github/test-data/build-configuration" "./"
      - id: "build-container"
        uses: "./.github/actions/build-image"
        with:
          build-contexts: |-
            tools=./tools
          target: "lint"
      - env:
          image_tag: |-
            ${{ steps.build-container.outputs.tag }}
          profile: |-
            ${{ matrix.profile }}
          workspace: |-
            ${{ matrix.workspace }}
        run: |-
          "docker" \
            "container" \
            "run" \
            --env "PROFILE=${profile:?}" \
            --rm \
            --tty \
            --volume ".:/src:ro" \
            "${image_tag:?}" \
            "${workspace:?}"
  test:
    runs-on: "ubuntu-latest" # "self-hosted"
    needs:
      - "matrix-arguments"
    strategy:
      matrix:
        profile: |-
          ${{ fromJSON(needs.matrix-arguments.outputs.profiles-json) }}
        workspace: |-
          ${{ fromJSON(needs.matrix-arguments.outputs.workspaces-json) }}
    steps:
      - uses: "actions/checkout@v4"
      - uses: "./.github/actions/setup-docker"
      - run: |-
          "mv" "./.github/test-data/build-configuration" "./"
      - id: "build-container"
        uses: "./.github/actions/build-image"
        with:
          build-contexts: |-
            tools=./tools
          target: "test"
      - env:
          image_tag: |-
            ${{ steps.build-container.outputs.tag }}
          profile: |-
            ${{ matrix.profile }}
          workspace: |-
            ${{ matrix.workspace }}
        run: |-
          "docker" \
            "container" \
            "run" \
            --env "PROFILE=${profile:?}" \
            --rm \
            --tty \
            --volume ".:/src:ro" \
            "${image_tag:?}" \
            "${workspace:?}"
  build:
    runs-on: "ubuntu-latest" # "self-hosted"
    env:
      software-release-id: |-
        ${{ (github.ref_type == 'tag' && format('{0} / ', github.ref)) || '' }}${{ github.sha }}
      upload-artifacts: |-
        ${{ toJSON(github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && inputs.upload-artifacts)) }}
    steps:
      - uses: "actions/checkout@v4"
      - uses: "./.github/actions/setup-docker"
      - id: "platform-builder"
        uses: "./.github/actions/build-image"
        with:
          build-arguments: |-
            software_release_id=${{ env.software-release-id }}
          build-contexts: |-
            platform=./platform
            tools=./tools
          target: "platform-builder"
      - id: "protocol-builder"
        uses: "./.github/actions/build-image"
        with:
          build-arguments: |-
            software_release_id=${{ env.software-release-id }}
          build-contexts: |-
            platform=./platform
            protocol=./protocol
            tools=./tools
          target: "protocol-builder"
      - env:
          image_tag: |-
            ${{ steps.platform-builder.outputs.tag }}
        run: |-
          set -eu

          for network_group in "test-net" "production-net"
          do
            "mkdir" "./${network_group:?}-artifacts/"

            "docker" \
              "container" \
              "run" \
              --rm \
              --tty \
              --volume "./${network_group:?}-artifacts:/artifacts" \
              "${image_tag:?}" \
              "${network_group:?}"
          done
      - env:
          image_tag: |-
            ${{ steps.protocol-builder.outputs.tag }}
        run: |-
          set -eu

          "docker" \
            "image" \
            "save" \
            --output "protocol-builder.tar" \
            "${image_tag:?}"
      - id: "gzip"
        uses: "./.github/actions/build-image"
        with:
          target: "gzip"
      - env:
          image_tag: |-
            ${{ steps.gzip.outputs.tag }}
        run: |-
          set -eu

          "docker" \
            "container" \
            "run" \
            --rm \
            --tty \
            --volume ".:/bind" \
            "${image_tag:?}" \
            "/bind/protocol-builder.tar"
      - if: |-
          fromJSON(env.upload-artifacts)
        name: "Upload test-net platform binaries"
        uses: "actions/upload-artifact@v4"
        with:
          if-no-files-found: "error"
          name: "platform-test-net"
          path: |-
            ./test-net-artifacts/*
      - if: |-
          fromJSON(env.upload-artifacts)
        name: "Upload production-net platform binaries"
        uses: "actions/upload-artifact@v4"
        with:
          if-no-files-found: "error"
          name: "platform-production-net"
          path: |-
            ./production-net-artifacts/*
      - if: |-
          fromJSON(env.upload-artifacts)
        name: "Upload protocol builder image"
        uses: "actions/upload-artifact@v4"
        with:
          if-no-files-found: "error"
          name: "protocol-builder"
          path: |-
            ./protocol-builder.tar.gz

  create_draft_release:
    needs:
      - "audit-dependencies"
      - "check-lockfiles"
      - "check-formatting"
      - "lint"
      - "test"
      - "check-unused-dependencies"
      - "build"
    if: |-
      github.ref_type == 'tag'
    name: "Create draft release"
    permissions:
      contents: "write"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: "0"
          fetch-tags: "true"
          sparse-checkout: |-
            .github/actions/install-tool
      - name: "Install `git-cliff` from cache"
        uses: "./.github/actions/install-tool"
        with:
          fail-on-cache-miss: "true"
          local: "false"
          no-fetching: "false"
          tool: "git-cliff"
      - name: "Download produced artifacts"
        uses: "actions/download-artifact@v4"
        with:
          merge-multiple: "false"
          path: "./artifacts/"
      - name: "Create test-net platform binaries archive"
        run: |-
          set -eu

          files="$(
            "find" \
              "." \
              "!" \
              -path "./**/**"
          )"

          "xargs" \
            -E "" \
            -n "1" \
            "tar" \
            -r \
            -f "../platform-test-net.tar" \
            <<EOF
          ${files:?}
          EOF
        working-directory: "./artifacts/platform-test-net/"
      - name: "Compress test-net platform binaries archive"
        run: |-
          "gzip" "./platform-test-net.tar"
        working-directory: "./artifacts/"
      - name: "Create production-net platform binaries archive"
        run: |-
          set -eu

          files="$(
            "find" \
              "." \
              "!" \
              "(" \
              -path "." \
              -o \
              -path "./**/**" \
              ")"
          )"
          files="$(
            "sed" \
              -e "s/^\\.\\/\\(.\\+\\)$/\\1/g" \
              <<EOF
          ${files:?}
          EOF
          )"
          readonly files

          "xargs" \
            -E "" \
            -n "1" \
            "tar" \
            -r \
            -f "../platform-production-net.tar" \
            <<EOF
          ${files:?}
          EOF
        working-directory: "./artifacts/platform-production-net/"
      - name: "Compress production-net platform binaries archive"
        run: |-
          "gzip" "./platform-production-net.tar"
        working-directory: "./artifacts/"
      - name: "Compress protocol builder image"
        run: |-
          set -eu

          "gzip" "./protocol-builder.tar"

          "mv" \
            "./protocol-builder.tar.gz" \
            "../"
        working-directory: "./artifacts/protocol-builder/"
      - name: "Generate changelog"
        run: |-
          "git" \
            "cliff" \
            --current \
            >"./changelog"
      - name: "Create draft release"
        uses: "softprops/action-gh-release@v2"
        with:
          name: |-
            ${{ github.ref_name }}
          draft: true
          body_path: "./changelog"
          generate_release_notes: false
          files: |
            ./artifacts/*.tar.gz
