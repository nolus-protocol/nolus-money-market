name: "<Callable> Run checks & build"
run-name: "Running workflow for smart contracts"

on:
  workflow_dispatch:
    inputs:
      check-dependencies-version:
        description: "Check dependencies' versions."
        required: true
        default: true
        type: "boolean"
      upload-artifacts:
        description: "Upload optimized builds as artifacts."
        required: true
        default: false
        type: "boolean"
  push:
    branches:
      - "main"
    tags:
      - "*"
    paths-ignore:
      - "**/*.md"
  pull_request:
    branches:
      - "main"
    paths-ignore:
      - "**/*.md"

concurrency:
  cancel-in-progress: true
  group: |-
    ${{ format('{0}-{1}-{2}-{3}', github.ref_name, github.ref_type, github.event_name, inputs.check-dependencies-version, inputs.upload-artifacts) }}

defaults:
  run:
    shell: "sh"

env:
  CARGO_TERM_COLOR: "always"
  SOFTWARE_RELEASE_ID: "ci"
  PROTOCOL_NETWORK: "ci"
  PROTOCOL_NAME: "ci"
  PROTOCOL_RELEASE_ID: "ci"
  check-dependencies-versions: |-
    ${{ toJSON(github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && inputs.check-dependencies-version)) }}
  upload-artifacts: |-
    ${{ toJSON(github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && inputs.upload-artifacts)) }}

permissions:
  actions: "write"

jobs:
  make_nix_cache:
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "nixbuild/nix-quick-install-action@v32"
      - name: "Restore and save Nix store"
        uses: "nix-community/cache-nix-action@v6"
        with:
          primary-key: |-
            nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          gc-max-store-size-linux: "0G"
          purge: true
          purge-prefixes: |-
            nix-${{ runner.os }}-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: "never"
      - run: |-
          "nix" \
            "build" \
            --no-use-registries \
            --no-update-lock-file
  profiles:
    runs-on: "ubuntu-latest"
    needs:
      - "make_nix_cache"
    outputs:
      profiles-json: |-
        ${{ steps.list-profiles.outputs.profiles-json }}
    steps:
      - uses: "actions/checkout@v4"
      - uses: "nixbuild/nix-quick-install-action@v32"
      - name: "Restore Nix store"
        uses: "nix-community/cache-nix-action/restore@v6"
        with:
          primary-key: |-
            nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
      - id: "list-profiles"
        run: |-
          set -eu

          output="profiles-json<<EOF
          $(
            "nix" \
              "run" \
              --ignore-environment \
              --no-update-lock-file \
              --no-use-registries \
              ".#ci-profiles-json"
          )
          EOF"

          "echo" \
            "${output:?}" \
            >"${GITHUB_OUTPUT:?}"
  lockfiles:
    runs-on: "ubuntu-latest"
    needs:
      - "make_nix_cache"
    steps:
      - if: |-
          fromJSON(env.check-dependencies-versions)
        uses: "actions/checkout@v4"
      - if: |-
          fromJSON(env.check-dependencies-versions)
        uses: "nixbuild/nix-quick-install-action@v32"
      - if: |-
          fromJSON(env.check-dependencies-versions)
        name: "Restore Nix store"
        uses: "nix-community/cache-nix-action/restore@v6"
        with:
          primary-key: |-
            nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
      - if: |-
          fromJSON(env.check-dependencies-versions)
        name: "Check lockfiles"
        run: |-
          "nix" \
            "run" \
            --ignore-environment \
            --no-update-lock-file \
            --no-use-registries \
            ".#ci-check-lockfiles"
  formatting:
    needs:
      - "make_nix_cache"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "nixbuild/nix-quick-install-action@v32"
      - name: "Restore Nix store"
        uses: "nix-community/cache-nix-action/restore@v6"
        with:
          primary-key: |-
            nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
      - name: "Check for unused dependencies"
        run: |-
          "nix" \
            "run" \
            --ignore-environment \
            --no-update-lock-file \
            --no-use-registries \
            ".#ci-check-formatting"
  check_unused_deps:
    needs:
      - "make_nix_cache"
      - "lockfiles"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "nixbuild/nix-quick-install-action@v32"
      - name: "Restore Nix store"
        uses: "nix-community/cache-nix-action/restore@v6"
        with:
          primary-key: |-
            nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
      - name: "Copy CI build configuration"
        run: |-
          "cp" \
            -R \
            "./.github/test-data/build-configuration" \
            "./"
      - name: "Check for unused dependencies"
        run: |-
          "nix" \
            "run" \
            --ignore-environment \
            --no-update-lock-file \
            --no-use-registries \
            ".#ci-check-unused-deps"
  lint:
    needs:
      - "make_nix_cache"
      - "profiles"
      - "lockfiles"
    strategy:
      fail-fast: true
      matrix:
        profile: "${{ fromJSON(needs.profiles.outputs.profiles-json) }}"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "nixbuild/nix-quick-install-action@v32"
      - name: "Restore Nix store"
        uses: "nix-community/cache-nix-action/restore@v6"
        with:
          primary-key: |-
            nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
      - name: "Copy CI build configuration"
        run: |-
          "cp" \
            -R \
            "./.github/test-data/build-configuration" \
            "./"
      - env:
          profile: |-
            ${{ matrix.profile }}
        name: "Lint codebase"
        run: |-
          "nix" \
            "run" \
            --ignore-environment \
            --no-update-lock-file \
            --no-use-registries \
            ".#ci-lint" \
            "${profile:?}"
  run_tests:
    permissions:
      actions: "write"
    needs:
      - "make_nix_cache"
      - "profiles"
      - "lockfiles"
    strategy:
      fail-fast: true
      matrix:
        profile: "${{ fromJSON(needs.profiles.outputs.profiles-json) }}"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "nixbuild/nix-quick-install-action@v32"
      - name: "Restore Nix store"
        uses: "nix-community/cache-nix-action/restore@v6"
        with:
          primary-key: |-
            nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
      - name: "Copy CI build configuration"
        run: |-
          "cp" \
            -R \
            "./.github/test-data/build-configuration" \
            "./"
      - env:
          profile: |-
            ${{ matrix.profile }}
        name: "Run tests"
        run: |-
          "nix" \
            "run" \
            --ignore-environment \
            --no-update-lock-file \
            --no-use-registries \
            ".#ci-run-tests" \
            "${profile:?}"
  build:
    needs:
      - "lockfiles"
    runs-on: "ubuntu-latest"
    name: "Build platform binaries and protocol container image"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: "0"
          fetch-tags: "true"
      - id: "builder-base-container-cache-key"
        env:
          check_deps_updated: |-
            ${{ toJSON(env.check-dependencies-versions) }}
        run: |-
          echo \
            "cache-key<<EOF
          builder-base-container-[check-deps=${check_deps_updated:?}]
          EOF" \
            >>"${GITHUB_OUTPUT:?}"
      - id: "restore-builder-base-container-cache"
        name: "Restore builder base image from cache"
        uses: "actions/cache/restore@v4"
        with:
          key: |-
            ${{ steps.builder-base-container-cache-key.outputs.cache-key }}
          path: |-
            builder-base-container.tar
      - if: |-
          !steps.restore-builder-base-container-cache.outputs.cache-hit
        name: "Build builder base image"
        run: |-
          "docker" \
            "buildx" \
            "build" \
            --file "build.Containerfile" \
            --tag "builder-base" \
            --target "builder-base" \
            "."
      - if: |-
          !steps.restore-builder-base-container-cache.outputs.cache-hit
        name: "Export builder base image"
        run: |-
          "docker" \
            "save" \
            --output "builder-base-container.tar" \
            "builder-base"
      - if: |-
          !steps.restore-builder-base-container-cache.outputs.cache-hit
        name: "Store builder base image to cache"
        uses: "actions/cache/save@v4"
        with:
          key: |-
            ${{ steps.builder-base-container-cache-key.outputs.cache-key }}
          path: |-
            builder-base-container.tar
      - if: |-
          steps.restore-builder-base-container-cache.outputs.cache-hit
        name: "Load builder base image"
        run: |-
          "docker" \
            "load" \
            --input "builder-base-container.tar"
      - name: "Produce builder images"
        env:
          CHECK_DEPS_UPDATED: |-
            ${{ env.check-dependencies-versions }}
        run: |-
          set -eu

          builder_image() {
            target="${1:?}"

            "docker" \
              "buildx" \
              "build" \
              --build-arg "check_dependencies_updated=${CHECK_DEPS_UPDATED:?}" \
              --file "build.Containerfile" \
              --tag "${target:?}-builder" \
              --target "${target:?}-builder" \
              "."
          }

          for workspace in \
            "platform" \
            "protocol"
          do
            "builder_image" "${workspace:?}"
          done
      - name: "Produce platform binaries"
        run: |-
          set -eux

          build_and_pack() {
            network="${1:?}"

            "mkdir" "./artifacts-${network:?}/"

            "docker" \
              "run" \
              --volume "./artifacts-${network:?}/:/artifacts/" \
              "platform-builder" \
              "${network:?}"
          }

          for network in \
            "test-net" \
            "production-net"
          do
            "build_and_pack" "${network:?}"
          done
      - if: |-
          fromJSON(env.upload-artifacts)
        name: "Export protocol builder image"
        run: |-
          "docker" \
            "image" \
            "save" \
            --output "protocol-builder.tar" \
            "protocol-builder"
      - if: |-
          fromJSON(env.upload-artifacts)
        name: "Upload test-net platform binaries"
        uses: "actions/upload-artifact@v4"
        with:
          if-no-files-found: "error"
          name: "platform-test-net"
          path: |-
            ./artifacts-test-net/*
      - if: |-
          fromJSON(env.upload-artifacts)
        name: "Upload production-net platform binaries"
        uses: "actions/upload-artifact@v4"
        with:
          if-no-files-found: "error"
          name: "platform-production-net"
          path: |-
            ./artifacts-production-net/*
      - if: |-
          fromJSON(env.upload-artifacts)
        name: "Upload protocol builder image"
        uses: "actions/upload-artifact@v4"
        with:
          if-no-files-found: "error"
          name: "protocol-builder"
          path: |-
            ./protocol-builder.tar
  create_draft_release:
    needs:
      - "lockfiles"
      - "formatting"
      - "check_unused_deps"
      - "lint"
      - "run_tests"
      - "build"
    if: |-
      github.ref_type == 'tag'
    name: "Create draft release"
    permissions:
      contents: "write"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: "0"
          fetch-tags: "true"
          sparse-checkout: |-
            flake.lock
            flake.nix
      - uses: "nixbuild/nix-quick-install-action@v32"
      - name: "Restore and save Nix store"
        uses: "nix-community/cache-nix-action@v6"
        with:
          primary-key: |-
            nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          gc-max-store-size-linux: "0G"
          purge: true
          purge-prefixes: |-
            nix-${{ runner.os }}-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: "never"
      - name: "Download produced artifacts"
        uses: "actions/download-artifact@v4"
        with:
          merge-multiple: "false"
      - name: "Create test-net platform binaries archive"
        run: |-
          "nix" \
            "run" \
            --ignore-environment \
            --no-update-lock-file \
            --no-use-registries \
            ".#create-tar-archive" \
            "./artifacts/platform-test-net/" \
            "./platform-test-net.tar"
      - name: "Compress test-net platform binaries archive"
        run: |-
          "nix" \
            "run" \
            --ignore-environment \
            --no-update-lock-file \
            --no-use-registries \
            ".#gzip" \
            "./platform-test-net.tar"
      - name: "Create production-net platform binaries archive"
        run: |-
          "nix" \
            "run" \
            --ignore-environment \
            --no-update-lock-file \
            --no-use-registries \
            ".#create-tar-archive" \
            "./artifacts/platform-production-net/" \
            "./platform-production-net.tar"
      - name: "Compress production-net platform binaries archive"
        run: |-
          "nix" \
            "run" \
            --ignore-environment \
            --no-update-lock-file \
            --no-use-registries \
            ".#gzip" \
            "./platform-production-net.tar"
      - name: "Move protocol builder image to \"artifacts\" directory"
        run: |-
          "nix" \
            "run" \
            --ignore-environment \
            --no-update-lock-file \
            --no-use-registries \
            ".#coreutils" \
            -- \
            --coreutils-prog="mv" \
            "./artifacts/protocol-builder/protocol-builder.tar" \
            "./"
      - name: "Compress protocol builder image"
        run: |-
          "nix" \
            "run" \
            --ignore-environment \
            --no-update-lock-file \
            --no-use-registries \
            ".#gzip" \
            "./protocol-builder.tar"
      - name: "Generate changelog"
        run: |-
          "nix" \
            "run" \
            --ignore-environment \
            --no-update-lock-file \
            --no-use-registries \
            ".#generate-release-notes" \
            >"./changelog"
      - name: "Create draft release"
        uses: "softprops/action-gh-release@v2"
        with:
          name: |-
            ${{ github.ref_name }}
          draft: true
          body_path: "./changelog"
          generate_release_notes: false
          files: |-
            ./*.tar.gz
